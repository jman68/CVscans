shiny::runApp()
runApp('R')
input$file1
input$file1$datapath
input$disp
df <- readxl::read_excel(input$file1$datapath)
runApp('R')
runApp('R')
install.packages("DT")
runApp('R')
input$file1
input$file1$datapath
# post-processing function for cv scans
cv_postprocess <- function(pre_workup,
rhe) {
# extract number of scans - subtracting entries from scan 1
scan1 <- pre_workup %>%
filter(Scan == 1) %>%
select(Index) %>%
max()
n_scans <- max(pre_workup$Scan) - 1
n_index <- (max(pre_workup$Index) - scan1)/n_scans
# filter scans to exclude scan 1
pre <- pre_workup %>%
filter(Scan != 1)
# reset index by scan number and set potential (V vs RHE)
pre1 <- pre %>%
rename(Potential = `Potential applied (V)`) %>%
mutate(`Potential (V vs RHE)` = Potential + rhe) %>%
relocate(Potential, `Potential (V vs RHE)`)
pre1$Index <- rep.int(1:n_index, n_scans)
# select relevant columns and spread and rename scan columns
pre2 <- pre1 %>%
select(Potential, `Potential (V vs RHE)`, `WE(1).Current (A)`, Scan, Index) %>%
spread(Scan, `WE(1).Current (A)`) %>%
rename_at(vars(-(1:3)), ~ paste0("Scan ", .))
arrange(Index)
# get average of scans 2 through n and drop index
scan_list <- names(pre2)[grepl("Scan", names(pre2))]
pre3 <- pre2 %>%
mutate(Average = rowMeans(select(., all_of(scan_list)))) %>%
mutate(uA = Average * 1000000) %>%
select(-Index)
# return output
return(pre3)
}
rhe <- 0.8868
for(file in input$file1$datapath) {
preworkup = readxl::read_excel(file)
postworkup = cv_postprocess(preworkup)
}
runApp('R')
install.packages("devtools")
devtools::document()
install.packages('renv')
renv::activate()
renv::init()
renv::init()
renv::init()
devtools::document()
install.packages("devtools")
devtools::document()
devtools::load_all()
install.packages("usethis")
usethis::create_package()
usethis::create_package(getwd())
usethis::create_package(getwd())
getwd()
renv::restore()
install.packages("devtools")
usethis::use_mit_license()
usethis::use_mit_license()
devtools::document
devtools::document()
renv::restore()
devtools::document()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
input$rhe
preworkup
preworkup$Index
postworkup = cv_postprocess(preworkup, input$rhe)
runApp()
runApp('R')
postworkup = cv_postprocess(preworkup, input$rhe)
devtools::document()
rlang::last_error()
devtools::document()
runApp('R')
gc()
ls()
runApp('R')
postworkup = cv_postprocess(preworkup, input$rhe)
# Run Shiny app
library(cv.scans)
devtools::install("cv.scans")
renv::restore()
#' Postprocess CV scan data
#'
#' @param pre_worup dataframe of raw CV data
#' @param rhe user inputted value of reference electrode shift
#'
#' @return post-processed CV data with one column per scan (excluding scan 1)
#'
#' @import dplyr tidyr
#' @export
cv_postprocess <- function(pre_workup,
rhe) {
# extract number of scans - subtracting entries from scan 1
scan1 <- pre_workup %>%
filter(Scan == 1) %>%
select(Index) %>%
max()
n_scans <- max(pre_workup$Scan) - 1
n_index <- (max(pre_workup$Index) - scan1)/n_scans
# filter scans to exclude scan 1
pre <- pre_workup %>%
filter(Scan != 1)
# reset index by scan number and set potential (V vs RHE)
pre1 <- pre %>%
rename(Potential = `Potential applied (V)`) %>%
mutate(`Potential (V vs RHE)` = Potential + rhe) %>%
relocate(Potential, `Potential (V vs RHE)`)
pre1$Index <- rep.int(1:n_index, n_scans)
# select relevant columns and spread and rename scan columns
pre2 <- pre1 %>%
select(Potential, `Potential (V vs RHE)`, `WE(1).Current (A)`, Scan, Index) %>%
spread(Scan, `WE(1).Current (A)`) %>%
rename_at(vars(-(1:3)), ~ paste0("Scan ", .)) %>%
arrange(Index)
# get average of scans 2 through n and drop index
scan_list <- names(pre2)[grepl("Scan", names(pre2))]
pre3 <- pre2 %>%
mutate(Average = rowMeans(select(., all_of(scan_list)))) %>%
mutate(uA = Average * 1000000) %>%
select(-Index)
# return output
return(pre3)
}
shiny::runApp('R')
runApp('R')
#' Postprocess CV scan data
#'
#' @param pre_worup dataframe of raw CV data
#' @param rhe user inputted value of reference electrode shift
#'
#' @return post-processed CV data with one column per scan (excluding scan 1)
#'
#' @import dplyr tidyr
#' @export
cv_postprocess <- function(pre_workup,
rhe) {
# extract number of scans - subtracting entries from scan 1
scan1 <- pre_workup %>%
filter(Scan == 1) %>%
select(Index) %>%
max()
n_scans <- max(pre_workup$Scan) - 1
n_index <- (max(pre_workup$Index) - scan1)/n_scans
# filter scans to exclude scan 1
pre <- pre_workup %>%
filter(Scan != 1)
# reset index by scan number and set potential (V vs RHE)
pre1 <- pre %>%
rename(Potential = `Potential applied (V)`) %>%
mutate(`Potential (V vs RHE)` = Potential + rhe) %>%
relocate(Potential, `Potential (V vs RHE)`)
pre1$Index <- rep.int(1:n_index, n_scans)
# select relevant columns and spread and rename scan columns
pre2 <- pre1 %>%
select(Potential, `Potential (V vs RHE)`, `WE(1).Current (A)`, Scan, Index) %>%
spread(Scan, `WE(1).Current (A)`) %>%
rename_at(vars(-(1:3)), ~ paste0("Scan ", .)) %>%
arrange(Index)
# get average of scans 2 through n and drop index
scan_list <- names(pre2)[grepl("Scan", names(pre2))]
pre3 <- pre2 %>%
mutate(Average = rowMeans(select(., all_of(scan_list)))) %>%
mutate(uA = Average * 1000000) %>%
select(-Index)
# return output
return(pre3)
}
preworkup = readxl::read_excel(file)
postworkup = cv_postprocess(preworkup, input$rhe)
library(dplyr)
library(tidyr)
preworkup = readxl::read_excel(file)
postworkup = cv_postprocess(preworkup, input$rhe)
runApp()
library(cv.scans)
runApp()
runApp()
devtools::document()
runApp()
library(cv.scans)
runApp()
devtools::document()
library(cv.scans)
runApp()
runApp()
library(cv.scans)
runApp()
library(cv.scans)
runApp()
runApp()
library(cv.scans)
runApp()
library(cv.scans)
runApp('R')
input$file1$datapath
input$file1
input$file1$name
library(cv.scans)
runApp()
preworkup = readxl::read_excel(file)
file
postworkup = cv_postprocess(preworkup, input$rhe)
writexl::write_xlsx(postworkup, file)
getwd()
library(rsconnect)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jonathan-man',
token='EB00DD236516894AAF98C641184EF5E9',
secret='nOSaaPtD2SlJlInVEtOFKK1nsokYWoyhHGy6+JcD')
rsconnect::deployApp(getwd())
rsconnect::deployApp(getwd())
rsconnect::deployApp(getwd())
gc()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
rsconnect::deployApp(getwd())
devtools::document()
library(CVscans)
